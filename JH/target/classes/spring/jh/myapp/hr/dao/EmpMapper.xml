<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="spring.jh.myapp.hr.dao.IEmpRepository">
<resultMap id="empMap" type="spring.jh.myapp.hr.model.EmpVO">
<result property="employeeId" column="employee_id" />
<result property="firstName" column="first_name" />
<result property="lastName" column="last_name" />
<result property="email" column="email" />
<result property="phoneNumber" column="phone_number" />
<result property="hireDate" column="hire_date" />
<result property="jobId" column="job_id" />
<result property="salary" column="salary" />
<result property="commissionPct" column="commission_pct" />
<result property="managerId" column="manager_id" />
<result property="departmentId" column="department_id" />
</resultMap>

<select id="getEmpList" resultMap="empMap">
select * 
from employees
</select>

<select id="getEmpCount" parameterType="int" resultType="int">
select count(*) 
from employees
<if test="deptId != null">
where department_id = #{deptId}
</if>
</select>

<select id="getEmpInfo" parameterType="int" resultType="spring.jh.myapp.hr.model.EmpDetailVO">
select emp.employee_id as employeeId, first_name as firstName, last_name as lastName, 
email, phone_number as phoneNumber, hire_date as hireDate, emp.job_id as jobId, 
job_title as jobTitle, salary, commission_pct as commissionPct, emp.manager_id as managerId, 
manager_name as managerName, emp.department_id as departmentId, department_name as departmentName 
 from employees emp 
 left join jobs job on emp.job_id=job.job_id
 left join departments dept on emp.department_id=dept.department_id
 left join
	(select employee_id, first_name||' '||last_name as manager_name
 from employees where employee_id in 
	(select distinct manager_id from employees)) man
	 on emp.manager_id=man.employee_id where emp.employee_id = #{empId}
</select>

<select id="getAllDeptId" resultType="hashmap">
select department_id as "departmentId", department_name as "departmentName" 
from departments
</select>

<select id="getAllJobId" resultType="spring.jh.myapp.hr.model.JobVO">
select job_id as jobId, job_title as jobTitle 
from jobs
</select>

<select id="getAllManagerId" resultType="hashmap">
select employee_id as "managerId",
	first_name||' '||last_name as "managerName"
from employees
where employee_id in(select distinct manager_id from employees)
</select>

<update id="updateEmp" parameterType="spring.jh.myapp.hr.model.EmpVO">
update employees 
set first_name=#{firstName}, last_name=${lastName}, phone_number=#{phoneNumber},
hire_date=#{hireDate}, job_id=#{jobId}, salary=#{salary}, commission_pct=#{commissionPct},
manager_id=#{managerId}, department_id=#{departmentId}
where employee_id=#{employeeId}
</update>

<update id="updateManager" parameterType="int">
update employees e 
set e.manager_id=null 
where manager_id=(select employee_id from employees where employee_id=#{empId})
</update>
<insert id="insertEmp" parameterType="spring.jh.myapp.hr.model.EmpVO">
insert into employees 
values(#{employeeId}, #{firstName}, #{lastName}, #{email}, #{phoneNumber},
SYSDATE, #{jobId}, #{salary}, #{commissionPct}, #{managerId}, #{departmentId})
</insert>

<delete id="deleteEmp">
delete from employees 
where employee_id=#{empId}
</delete>

<delete id="deleteJobHistory" parameterType="int">
delete from job_history 
where employee_id=#{empId}
</delete>
</mapper>